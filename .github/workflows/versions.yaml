# name: 🚀 Build and deploy to Azure-Function-App

# on:
#   workflow_dispatch:
#     inputs:
#       branchName:
#         description: "branch name"
#         required: true
#       deploy:
#         type: choice
#         description: deploy directories to function apps
#         options:
#           - only_changed_directories
#           - all

# env:
#   WORKING_DIR: services

# jobs:
#   setup:
#     runs-on: "ubuntu-latest"
#     outputs:
#       # TAG: ${{ steps.get_release.outputs.tag_name }}
#       MATRIX: ${{ env.DIRS }}

#     steps:
#       - name: 📂 Checkout repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           ref: ${{ github.event.inputs.branchName }}

#       - name: list sub-directories
#         id: sub-directories
#         run: echo "DIRS=$(ls -d services/*/*/ | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_ENV
#         if: inputs.deploy  == 'all'

#       - name: 🔍 get previous deployment success commit
#         id: previous-success-deployment
#         uses: SamhammerAG/last-successful-build-action@v4
#         with:  
#           token: "${{ secrets.GITHUB_TOKEN }}"
#           branch: "main"
#           workflow: "🚀 Build and deploy to Azure-Function-App"
#         if: inputs.deploy == 'only_changed_directories'

#       - name: Get changed directories
#         id: changed-directories
#         uses: tj-actions/changed-files@v42
#         with:
#           base_sha: ${{ steps.previous-success-deployment.outputs.sha }}
#           json: true
#           files: |
#             ${{ env.WORKING_DIR }}/**
#           dir_names: true
#           dir_names_max_depth: 3
#           escape_json: false
#         if: inputs.deploy == 'only_changed_directories'

#       - name: ♻️ Set correct environment
#         run: echo "DIRS=${{ toJson(steps.changed-directories.outputs.all_changed_files) }}" >> $GITHUB_ENV
#         if: inputs.deploy == 'only_changed_directories'

#       - name: 🛠️ Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

      # - name: 🔖 Get release tag name
      #   id: get_release
      #   uses: cardinalby/git-get-release-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}

  # build-and-deploy:
  #   runs-on: "ubuntu-latest"
  #   permissions:
  #     contents: read
  #     packages: write
  #   needs: setup

    # env:
    #   REGISTRY: ghcr.io
    #   IMAGE_NAME: ${{ github.repository }}/try2
    # env:
    #   TAG: ${{ needs.setup.outputs.TAG }}
    # strategy:
    #   matrix:
    #     directory: ${{ fromJson(needs.setup.outputs.MATRIX) }}

    # steps:
    #   - name: 📂 Checkout repository
    #     uses: actions/checkout@v4
    #     with:
    #       ref: ${{ github.event.inputs.branchName }}

      # - name: cd 
      #   run: cd services/try2/try2

      # # - uses: actions-ecosystem/action-release-label@v1
      # #   id: release-label

      # - uses: actions-ecosystem/action-get-latest-tag@v1
      #   id: get-latest-tag
      #   # if: ${{ steps.release-label.outputs.level != null }}
      # - name: echo latest tag
      #   run: echo " ${{ steps.get-latest-tag.outputs.tag}}"

      # - uses: actions-ecosystem/action-bump-semver@v1
      #   id: bump-semver
      #   # if: ${{ steps.release-label.outputs.level != null }}
      #   with:
      #     current_version: ${{ steps.get-latest-tag.outputs.tag }}
      #     level: "patch"
   
      # - name: echo new version
      #   run: echo " ${{ steps.bump-semver.outputs.new_version }}"

      # - name: cd ..
      #   run: cd ../../..

      # - name: Check package version
      #   uses: technote-space/package-version-check-action@v1
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      #     BRANCH_PREFIX: release/

       
      # - name: echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #   run: echo ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: 🔑 Log in to registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # - name: echo ${{ steps.meta.outputs.tags }}
      #   run: echo ${{ steps.meta.outputs.tags }}
      

      # - name: 🔑 Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: 🧰 Check and copy necessary files
      #   run: |
      #     REQUIRED_FILES=(".funcignore" "host.json" "Dockerfile" ".dockerignore" )
      #     for file in "${REQUIRED_FILES[@]}"; do
      #       cp "./${{ env.WORKING_DIR }}/${file}" "${{ matrix.directory }}/"
      #     done
      # - name: 🔄 Extract Last Directory Level
      #   id: get-last-level
      #   run: |
      #     LAST_LEVEL=$(echo ${{ matrix.directory }} | xargs -n 1 basename)
      #     echo "LAST_LEVEL=$LAST_LEVEL" >> "$GITHUB_ENV"
      # - name: 🐳 Docker metadata
      #   id: docker_meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}
      #     tags: |
      #       type=raw,value=latest,enable={{is_default_branch}}
      #       type=semver,pattern=v{{major}}.{{minor}}.{{patch}},value=${{ steps.bump-semver.outputs.new_version }}
      #       type=semver,pattern=v{{major}}.{{minor}},value=${{ steps.bump-semver.outputs.new_version }}
      #       type=semver,pattern=v{{major}},value=${{ steps.bump-semver.outputs.new_version }}
      # - name: 🏗️ Build and push container image to registry
      #   id: build-and-push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./${{ matrix.directory }}
      #     push: true
      #     tags: ${{ steps.docker_meta.outputs.tags }}
      #     labels: ${{ steps.docker_meta.outputs.labels }}
      #     file: ./${{ matrix.directory }}/Dockerfile

  #     - name: 🚀 Deploy to Azure Functions
  #       id: deploy-to-functions
  #       uses: Azure/functions-container-action@v1
  #       with:
  #         app-name: ${{ env.LAST_LEVEL }}
  #         image: "ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}:${{ env.TAG }}"


name: 🚀 Build and deploy to Azure-Function-App

on:
  workflow_dispatch:
    inputs:
      branchName:
        description: "branch name"
        required: true
      deploy:
        type: choice
        description: deploy directories to function apps
        options:
          - only_changed_directories
          - all

env:
  WORKING_DIR: services

jobs:
  setup:
    runs-on: "ubuntu-latest"
    outputs:
      # TAG: ${{ steps.get_release.outputs.tag_name }}
      MATRIX: ${{ env.DIRS }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branchName }}

      - name: list sub-directories
        id: sub-directories
        run: echo "DIRS=$(ls -d services/*/*/ | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_ENV
        if: inputs.deploy  == 'all'

      - name: 🔍 get previous deployment success commit
        id: previous-success-deployment
        uses: SamhammerAG/last-successful-build-action@v4
        with:  
          token: "${{ secrets.GITHUB_TOKEN }}"
          branch: "main"
          workflow: "🚀 Build and deploy to Azure-Function-App"
        if: inputs.deploy == 'only_changed_directories'

      - name: Get changed directories
        id: changed-directories
        uses: tj-actions/changed-files@v42
        with:
          base_sha: ${{ steps.previous-success-deployment.outputs.sha }}
          json: true
          files: |
            ${{ env.WORKING_DIR }}/**
          dir_names: true
          dir_names_max_depth: 3
          escape_json: false
        if: inputs.deploy == 'only_changed_directories'

      - name: ♻️ Set correct environment
        run: echo "DIRS=${{ toJson(steps.changed-directories.outputs.all_changed_files) }}" >> $GITHUB_ENV
        if: inputs.deploy == 'only_changed_directories'

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: 🔖 Get release tag name
      #   id: get_release
      #   uses: cardinalby/git-get-release-action@v1
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}

  build-and-deploy:
    runs-on: "ubuntu-latest"
    permissions:
      contents: read
      packages: write
    needs: setup
    # env:
      # TAG: ${{ needs.setup.outputs.TAG }}
    strategy:
      matrix:
        directory: ${{ fromJson(needs.setup.outputs.MATRIX) }}

    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branchName }}

      - name: 🔑 Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: 🔑 Login to Azure
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: 🧰 Check and copy necessary files
      #   run: |
      #     REQUIRED_FILES=(".funcignore" "host.json" "Dockerfile" ".dockerignore" )
      #     for file in "${REQUIRED_FILES[@]}"; do
      #       cp "./${{ env.WORKING_DIR }}/${file}" "${{ matrix.directory }}/"
      #     done

      # - name: Determine latest version
      #   id: latest_php_version
      #   uses: flownative/action-docker-get-label@v1
      #   with:
      #     image: ghcr.io/malkakozlik/manage-version/try2:v0.0.1
      #     label: org.opencontainers.image.version
      #     registry_username: ${{ github.actor }}
      #     registry_password: ${{ secrets.GITHUB_TOKEN }}
      #     registry_endpoint: https://ghcr.io

      # - name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}

      # - name: print labels
      #   run: echo "${{ steps.meta.outputs.json }}"

      # - name: print env
      #   run: echo $DOCKER_METADATA_OUTPUT_VERSION

      - name: 🔄 Extract Last Directory Level
        id: get-last-level
        run: |
          LAST_LEVEL=$(echo ${{ matrix.directory }} | xargs -n 1 basename)
          echo "LAST_LEVEL=$LAST_LEVEL" >> "$GITHUB_ENV"

      - name: echo 
        run: echo "ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}:latest

      - name: print labels
        run: echo "${{ steps.meta.outputs.labels }}"

      # - name: print env
        # run: echo $DOCKER_METADATA_OUTPUT_VERSION

      # - name: insert to env
      #   run: echo "LABELS=${{ steps.meta.outputs.labels }}" >> "$GITHUB_ENV"

      # - name:  echo tag
      #   run: echo $DOCKER_METADATA_OUTPUT_LABELS
      # - name: env tag
      #   run: echo "TAG=v0.0.1" >> "$GITHUB_ENV"

   
      # - name: 🐳 Docker metadata
      #   id: docker_meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ghcr.io/${{ github.repository }}/${{ env.LAST_LEVEL }}
      #     tags: |
      #       type=raw,value=latest,enable={{is_default_branch}}
      #       type=semver,pattern=v{{major}}.{{minor}}.{{patch}},value=${{ env.TAG }}
      #       type=semver,pattern=v{{major}}.{{minor}},value=${{ env.TAG }}
      #       type=semver,pattern=v{{major}},value=${{ env.TAG }}

      # - name: echo tags and labels
      #   run: |
      #     echo "${{ steps.docker_meta.outputs.labels }}"


      # -------------------------------------------------------------------------------------------------------------------------
      # - name: 🏗️ Build and push container image to registry
      #   id: build-and-push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./${{ matrix.directory }}
      #     push: true
      #     tags: ${{ steps.docker_meta.outputs.tags }}
      #     labels: ${{ steps.docker_meta.outputs.labels }}
      #     file: ./${{ matrix.directory }}/Dockerfile